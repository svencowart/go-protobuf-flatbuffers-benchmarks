// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatmsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageNest struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageNest(buf []byte, offset flatbuffers.UOffsetT) *MessageNest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageNest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageNest(buf []byte, offset flatbuffers.UOffsetT) *MessageNest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageNest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageNest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageNest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageNest) Field1() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageNest) MutateField1(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MessageNest) Field2(obj *MessageNestField2) *MessageNestField2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MessageNestField2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MessageNestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MessageNestAddField1(builder *flatbuffers.Builder, field1 uint64) {
	builder.PrependUint64Slot(0, field1, 0)
}
func MessageNestAddField2(builder *flatbuffers.Builder, field2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(field2), 0)
}
func MessageNestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
