// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatmsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageFlatLarge struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageFlatLarge(buf []byte, offset flatbuffers.UOffsetT) *MessageFlatLarge {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageFlatLarge{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageFlatLarge(buf []byte, offset flatbuffers.UOffsetT) *MessageFlatLarge {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageFlatLarge{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageFlatLarge) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageFlatLarge) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageFlatLarge) Field1() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField1(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MessageFlatLarge) Field2() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField2(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *MessageFlatLarge) Field3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField3(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *MessageFlatLarge) Field4() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField4(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *MessageFlatLarge) Field5() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField5(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *MessageFlatLarge) Field6() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField6(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *MessageFlatLarge) Field7() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField7(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *MessageFlatLarge) Field8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field10() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField10(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *MessageFlatLarge) Field11() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField11(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *MessageFlatLarge) Field12() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField12(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func (rcv *MessageFlatLarge) Field13() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField13(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *MessageFlatLarge) Field14() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField14(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *MessageFlatLarge) Field15() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField15(n float32) bool {
	return rcv._tab.MutateFloat32Slot(32, n)
}

func (rcv *MessageFlatLarge) Field16() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField16(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

func (rcv *MessageFlatLarge) Field17() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField17(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

func (rcv *MessageFlatLarge) Field18() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field19() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field20() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField20(n bool) bool {
	return rcv._tab.MutateBoolSlot(42, n)
}

func (rcv *MessageFlatLarge) Field21() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField21(n uint32) bool {
	return rcv._tab.MutateUint32Slot(44, n)
}

func (rcv *MessageFlatLarge) Field22() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField22(n uint64) bool {
	return rcv._tab.MutateUint64Slot(46, n)
}

func (rcv *MessageFlatLarge) Field23() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField23(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

func (rcv *MessageFlatLarge) Field24() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField24(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

func (rcv *MessageFlatLarge) Field25() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField25(n float32) bool {
	return rcv._tab.MutateFloat32Slot(52, n)
}

func (rcv *MessageFlatLarge) Field26() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField26(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

func (rcv *MessageFlatLarge) Field27() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField27(n bool) bool {
	return rcv._tab.MutateBoolSlot(56, n)
}

func (rcv *MessageFlatLarge) Field28() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field29() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field30() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField30(n bool) bool {
	return rcv._tab.MutateBoolSlot(62, n)
}

func (rcv *MessageFlatLarge) Field31() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField31(n uint32) bool {
	return rcv._tab.MutateUint32Slot(64, n)
}

func (rcv *MessageFlatLarge) Field32() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField32(n uint64) bool {
	return rcv._tab.MutateUint64Slot(66, n)
}

func (rcv *MessageFlatLarge) Field33() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField33(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

func (rcv *MessageFlatLarge) Field34() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField34(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

func (rcv *MessageFlatLarge) Field35() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField35(n float32) bool {
	return rcv._tab.MutateFloat32Slot(72, n)
}

func (rcv *MessageFlatLarge) Field36() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField36(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

func (rcv *MessageFlatLarge) Field37() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField37(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

func (rcv *MessageFlatLarge) Field38() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field39() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field40() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField40(n bool) bool {
	return rcv._tab.MutateBoolSlot(82, n)
}

func (rcv *MessageFlatLarge) Field41() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField41(n uint32) bool {
	return rcv._tab.MutateUint32Slot(84, n)
}

func (rcv *MessageFlatLarge) Field42() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField42(n uint64) bool {
	return rcv._tab.MutateUint64Slot(86, n)
}

func (rcv *MessageFlatLarge) Field43() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField43(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

func (rcv *MessageFlatLarge) Field44() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField44(n int64) bool {
	return rcv._tab.MutateInt64Slot(90, n)
}

func (rcv *MessageFlatLarge) Field45() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField45(n float32) bool {
	return rcv._tab.MutateFloat32Slot(92, n)
}

func (rcv *MessageFlatLarge) Field46() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField46(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

func (rcv *MessageFlatLarge) Field47() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField47(n bool) bool {
	return rcv._tab.MutateBoolSlot(96, n)
}

func (rcv *MessageFlatLarge) Field48() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field49() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field50() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField50(n bool) bool {
	return rcv._tab.MutateBoolSlot(102, n)
}

func (rcv *MessageFlatLarge) Field51() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField51(n uint32) bool {
	return rcv._tab.MutateUint32Slot(104, n)
}

func (rcv *MessageFlatLarge) Field52() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField52(n uint64) bool {
	return rcv._tab.MutateUint64Slot(106, n)
}

func (rcv *MessageFlatLarge) Field53() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField53(n int32) bool {
	return rcv._tab.MutateInt32Slot(108, n)
}

func (rcv *MessageFlatLarge) Field54() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField54(n int64) bool {
	return rcv._tab.MutateInt64Slot(110, n)
}

func (rcv *MessageFlatLarge) Field55() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField55(n float32) bool {
	return rcv._tab.MutateFloat32Slot(112, n)
}

func (rcv *MessageFlatLarge) Field56() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField56(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

func (rcv *MessageFlatLarge) Field57() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField57(n bool) bool {
	return rcv._tab.MutateBoolSlot(116, n)
}

func (rcv *MessageFlatLarge) Field58() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field59() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field60() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField60(n bool) bool {
	return rcv._tab.MutateBoolSlot(122, n)
}

func (rcv *MessageFlatLarge) Field61() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField61(n uint32) bool {
	return rcv._tab.MutateUint32Slot(124, n)
}

func (rcv *MessageFlatLarge) Field62() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField62(n uint64) bool {
	return rcv._tab.MutateUint64Slot(126, n)
}

func (rcv *MessageFlatLarge) Field63() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField63(n int32) bool {
	return rcv._tab.MutateInt32Slot(128, n)
}

func (rcv *MessageFlatLarge) Field64() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField64(n int64) bool {
	return rcv._tab.MutateInt64Slot(130, n)
}

func (rcv *MessageFlatLarge) Field65() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField65(n float32) bool {
	return rcv._tab.MutateFloat32Slot(132, n)
}

func (rcv *MessageFlatLarge) Field66() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField66(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

func (rcv *MessageFlatLarge) Field67() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField67(n bool) bool {
	return rcv._tab.MutateBoolSlot(136, n)
}

func (rcv *MessageFlatLarge) Field68() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field69() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field70() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField70(n bool) bool {
	return rcv._tab.MutateBoolSlot(142, n)
}

func (rcv *MessageFlatLarge) Field71() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField71(n uint32) bool {
	return rcv._tab.MutateUint32Slot(144, n)
}

func (rcv *MessageFlatLarge) Field72() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField72(n uint64) bool {
	return rcv._tab.MutateUint64Slot(146, n)
}

func (rcv *MessageFlatLarge) Field73() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField73(n int32) bool {
	return rcv._tab.MutateInt32Slot(148, n)
}

func (rcv *MessageFlatLarge) Field74() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField74(n int64) bool {
	return rcv._tab.MutateInt64Slot(150, n)
}

func (rcv *MessageFlatLarge) Field75() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField75(n float32) bool {
	return rcv._tab.MutateFloat32Slot(152, n)
}

func (rcv *MessageFlatLarge) Field76() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField76(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

func (rcv *MessageFlatLarge) Field77() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField77(n bool) bool {
	return rcv._tab.MutateBoolSlot(156, n)
}

func (rcv *MessageFlatLarge) Field78() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field79() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field80() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField80(n bool) bool {
	return rcv._tab.MutateBoolSlot(162, n)
}

func (rcv *MessageFlatLarge) Field81() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField81(n uint32) bool {
	return rcv._tab.MutateUint32Slot(164, n)
}

func (rcv *MessageFlatLarge) Field82() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField82(n uint64) bool {
	return rcv._tab.MutateUint64Slot(166, n)
}

func (rcv *MessageFlatLarge) Field83() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField83(n int32) bool {
	return rcv._tab.MutateInt32Slot(168, n)
}

func (rcv *MessageFlatLarge) Field84() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField84(n int64) bool {
	return rcv._tab.MutateInt64Slot(170, n)
}

func (rcv *MessageFlatLarge) Field85() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField85(n float32) bool {
	return rcv._tab.MutateFloat32Slot(172, n)
}

func (rcv *MessageFlatLarge) Field86() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField86(n float64) bool {
	return rcv._tab.MutateFloat64Slot(174, n)
}

func (rcv *MessageFlatLarge) Field87() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField87(n bool) bool {
	return rcv._tab.MutateBoolSlot(176, n)
}

func (rcv *MessageFlatLarge) Field88() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field89() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field90() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField90(n bool) bool {
	return rcv._tab.MutateBoolSlot(182, n)
}

func (rcv *MessageFlatLarge) Field91() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField91(n uint32) bool {
	return rcv._tab.MutateUint32Slot(184, n)
}

func (rcv *MessageFlatLarge) Field92() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField92(n uint64) bool {
	return rcv._tab.MutateUint64Slot(186, n)
}

func (rcv *MessageFlatLarge) Field93() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField93(n int32) bool {
	return rcv._tab.MutateInt32Slot(188, n)
}

func (rcv *MessageFlatLarge) Field94() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField94(n int64) bool {
	return rcv._tab.MutateInt64Slot(190, n)
}

func (rcv *MessageFlatLarge) Field95() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField95(n float32) bool {
	return rcv._tab.MutateFloat32Slot(192, n)
}

func (rcv *MessageFlatLarge) Field96() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField96(n float64) bool {
	return rcv._tab.MutateFloat64Slot(194, n)
}

func (rcv *MessageFlatLarge) Field97() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField97(n bool) bool {
	return rcv._tab.MutateBoolSlot(196, n)
}

func (rcv *MessageFlatLarge) Field98() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field99() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field100() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField100(n bool) bool {
	return rcv._tab.MutateBoolSlot(202, n)
}

func (rcv *MessageFlatLarge) Field101() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField101(n uint32) bool {
	return rcv._tab.MutateUint32Slot(204, n)
}

func (rcv *MessageFlatLarge) Field102() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField102(n uint64) bool {
	return rcv._tab.MutateUint64Slot(206, n)
}

func (rcv *MessageFlatLarge) Field103() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField103(n int32) bool {
	return rcv._tab.MutateInt32Slot(208, n)
}

func (rcv *MessageFlatLarge) Field104() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField104(n int64) bool {
	return rcv._tab.MutateInt64Slot(210, n)
}

func (rcv *MessageFlatLarge) Field105() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField105(n float32) bool {
	return rcv._tab.MutateFloat32Slot(212, n)
}

func (rcv *MessageFlatLarge) Field106() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(214))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField106(n float64) bool {
	return rcv._tab.MutateFloat64Slot(214, n)
}

func (rcv *MessageFlatLarge) Field107() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(216))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField107(n bool) bool {
	return rcv._tab.MutateBoolSlot(216, n)
}

func (rcv *MessageFlatLarge) Field108() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(218))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field109() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(220))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field110() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(222))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField110(n bool) bool {
	return rcv._tab.MutateBoolSlot(222, n)
}

func (rcv *MessageFlatLarge) Field111() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(224))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField111(n uint32) bool {
	return rcv._tab.MutateUint32Slot(224, n)
}

func (rcv *MessageFlatLarge) Field112() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(226))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField112(n uint64) bool {
	return rcv._tab.MutateUint64Slot(226, n)
}

func (rcv *MessageFlatLarge) Field113() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(228))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField113(n int32) bool {
	return rcv._tab.MutateInt32Slot(228, n)
}

func (rcv *MessageFlatLarge) Field114() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(230))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlatLarge) MutateField114(n int64) bool {
	return rcv._tab.MutateInt64Slot(230, n)
}

func (rcv *MessageFlatLarge) Field115() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(232))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField115(n float32) bool {
	return rcv._tab.MutateFloat32Slot(232, n)
}

func (rcv *MessageFlatLarge) Field116() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(234))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessageFlatLarge) MutateField116(n float64) bool {
	return rcv._tab.MutateFloat64Slot(234, n)
}

func (rcv *MessageFlatLarge) Field117() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(236))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageFlatLarge) MutateField117(n bool) bool {
	return rcv._tab.MutateBoolSlot(236, n)
}

func (rcv *MessageFlatLarge) Field118() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(238))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlatLarge) Field119() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(240))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MessageFlatLargeStart(builder *flatbuffers.Builder) {
	builder.StartObject(119)
}
func MessageFlatLargeAddField1(builder *flatbuffers.Builder, field1 uint32) {
	builder.PrependUint32Slot(0, field1, 0)
}
func MessageFlatLargeAddField2(builder *flatbuffers.Builder, field2 uint64) {
	builder.PrependUint64Slot(1, field2, 0)
}
func MessageFlatLargeAddField3(builder *flatbuffers.Builder, field3 int32) {
	builder.PrependInt32Slot(2, field3, 0)
}
func MessageFlatLargeAddField4(builder *flatbuffers.Builder, field4 int64) {
	builder.PrependInt64Slot(3, field4, 0)
}
func MessageFlatLargeAddField5(builder *flatbuffers.Builder, field5 float32) {
	builder.PrependFloat32Slot(4, field5, 0.0)
}
func MessageFlatLargeAddField6(builder *flatbuffers.Builder, field6 float64) {
	builder.PrependFloat64Slot(5, field6, 0.0)
}
func MessageFlatLargeAddField7(builder *flatbuffers.Builder, field7 bool) {
	builder.PrependBoolSlot(6, field7, false)
}
func MessageFlatLargeAddField8(builder *flatbuffers.Builder, field8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(field8), 0)
}
func MessageFlatLargeAddField9(builder *flatbuffers.Builder, field9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(field9), 0)
}
func MessageFlatLargeAddField10(builder *flatbuffers.Builder, field10 bool) {
	builder.PrependBoolSlot(9, field10, false)
}
func MessageFlatLargeAddField11(builder *flatbuffers.Builder, field11 uint32) {
	builder.PrependUint32Slot(10, field11, 0)
}
func MessageFlatLargeAddField12(builder *flatbuffers.Builder, field12 uint64) {
	builder.PrependUint64Slot(11, field12, 0)
}
func MessageFlatLargeAddField13(builder *flatbuffers.Builder, field13 int32) {
	builder.PrependInt32Slot(12, field13, 0)
}
func MessageFlatLargeAddField14(builder *flatbuffers.Builder, field14 int64) {
	builder.PrependInt64Slot(13, field14, 0)
}
func MessageFlatLargeAddField15(builder *flatbuffers.Builder, field15 float32) {
	builder.PrependFloat32Slot(14, field15, 0.0)
}
func MessageFlatLargeAddField16(builder *flatbuffers.Builder, field16 float64) {
	builder.PrependFloat64Slot(15, field16, 0.0)
}
func MessageFlatLargeAddField17(builder *flatbuffers.Builder, field17 bool) {
	builder.PrependBoolSlot(16, field17, false)
}
func MessageFlatLargeAddField18(builder *flatbuffers.Builder, field18 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(field18), 0)
}
func MessageFlatLargeAddField19(builder *flatbuffers.Builder, field19 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(field19), 0)
}
func MessageFlatLargeAddField20(builder *flatbuffers.Builder, field20 bool) {
	builder.PrependBoolSlot(19, field20, false)
}
func MessageFlatLargeAddField21(builder *flatbuffers.Builder, field21 uint32) {
	builder.PrependUint32Slot(20, field21, 0)
}
func MessageFlatLargeAddField22(builder *flatbuffers.Builder, field22 uint64) {
	builder.PrependUint64Slot(21, field22, 0)
}
func MessageFlatLargeAddField23(builder *flatbuffers.Builder, field23 int32) {
	builder.PrependInt32Slot(22, field23, 0)
}
func MessageFlatLargeAddField24(builder *flatbuffers.Builder, field24 int64) {
	builder.PrependInt64Slot(23, field24, 0)
}
func MessageFlatLargeAddField25(builder *flatbuffers.Builder, field25 float32) {
	builder.PrependFloat32Slot(24, field25, 0.0)
}
func MessageFlatLargeAddField26(builder *flatbuffers.Builder, field26 float64) {
	builder.PrependFloat64Slot(25, field26, 0.0)
}
func MessageFlatLargeAddField27(builder *flatbuffers.Builder, field27 bool) {
	builder.PrependBoolSlot(26, field27, false)
}
func MessageFlatLargeAddField28(builder *flatbuffers.Builder, field28 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(field28), 0)
}
func MessageFlatLargeAddField29(builder *flatbuffers.Builder, field29 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(field29), 0)
}
func MessageFlatLargeAddField30(builder *flatbuffers.Builder, field30 bool) {
	builder.PrependBoolSlot(29, field30, false)
}
func MessageFlatLargeAddField31(builder *flatbuffers.Builder, field31 uint32) {
	builder.PrependUint32Slot(30, field31, 0)
}
func MessageFlatLargeAddField32(builder *flatbuffers.Builder, field32 uint64) {
	builder.PrependUint64Slot(31, field32, 0)
}
func MessageFlatLargeAddField33(builder *flatbuffers.Builder, field33 int32) {
	builder.PrependInt32Slot(32, field33, 0)
}
func MessageFlatLargeAddField34(builder *flatbuffers.Builder, field34 int64) {
	builder.PrependInt64Slot(33, field34, 0)
}
func MessageFlatLargeAddField35(builder *flatbuffers.Builder, field35 float32) {
	builder.PrependFloat32Slot(34, field35, 0.0)
}
func MessageFlatLargeAddField36(builder *flatbuffers.Builder, field36 float64) {
	builder.PrependFloat64Slot(35, field36, 0.0)
}
func MessageFlatLargeAddField37(builder *flatbuffers.Builder, field37 bool) {
	builder.PrependBoolSlot(36, field37, false)
}
func MessageFlatLargeAddField38(builder *flatbuffers.Builder, field38 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(field38), 0)
}
func MessageFlatLargeAddField39(builder *flatbuffers.Builder, field39 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(field39), 0)
}
func MessageFlatLargeAddField40(builder *flatbuffers.Builder, field40 bool) {
	builder.PrependBoolSlot(39, field40, false)
}
func MessageFlatLargeAddField41(builder *flatbuffers.Builder, field41 uint32) {
	builder.PrependUint32Slot(40, field41, 0)
}
func MessageFlatLargeAddField42(builder *flatbuffers.Builder, field42 uint64) {
	builder.PrependUint64Slot(41, field42, 0)
}
func MessageFlatLargeAddField43(builder *flatbuffers.Builder, field43 int32) {
	builder.PrependInt32Slot(42, field43, 0)
}
func MessageFlatLargeAddField44(builder *flatbuffers.Builder, field44 int64) {
	builder.PrependInt64Slot(43, field44, 0)
}
func MessageFlatLargeAddField45(builder *flatbuffers.Builder, field45 float32) {
	builder.PrependFloat32Slot(44, field45, 0.0)
}
func MessageFlatLargeAddField46(builder *flatbuffers.Builder, field46 float64) {
	builder.PrependFloat64Slot(45, field46, 0.0)
}
func MessageFlatLargeAddField47(builder *flatbuffers.Builder, field47 bool) {
	builder.PrependBoolSlot(46, field47, false)
}
func MessageFlatLargeAddField48(builder *flatbuffers.Builder, field48 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(field48), 0)
}
func MessageFlatLargeAddField49(builder *flatbuffers.Builder, field49 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(field49), 0)
}
func MessageFlatLargeAddField50(builder *flatbuffers.Builder, field50 bool) {
	builder.PrependBoolSlot(49, field50, false)
}
func MessageFlatLargeAddField51(builder *flatbuffers.Builder, field51 uint32) {
	builder.PrependUint32Slot(50, field51, 0)
}
func MessageFlatLargeAddField52(builder *flatbuffers.Builder, field52 uint64) {
	builder.PrependUint64Slot(51, field52, 0)
}
func MessageFlatLargeAddField53(builder *flatbuffers.Builder, field53 int32) {
	builder.PrependInt32Slot(52, field53, 0)
}
func MessageFlatLargeAddField54(builder *flatbuffers.Builder, field54 int64) {
	builder.PrependInt64Slot(53, field54, 0)
}
func MessageFlatLargeAddField55(builder *flatbuffers.Builder, field55 float32) {
	builder.PrependFloat32Slot(54, field55, 0.0)
}
func MessageFlatLargeAddField56(builder *flatbuffers.Builder, field56 float64) {
	builder.PrependFloat64Slot(55, field56, 0.0)
}
func MessageFlatLargeAddField57(builder *flatbuffers.Builder, field57 bool) {
	builder.PrependBoolSlot(56, field57, false)
}
func MessageFlatLargeAddField58(builder *flatbuffers.Builder, field58 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(field58), 0)
}
func MessageFlatLargeAddField59(builder *flatbuffers.Builder, field59 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(field59), 0)
}
func MessageFlatLargeAddField60(builder *flatbuffers.Builder, field60 bool) {
	builder.PrependBoolSlot(59, field60, false)
}
func MessageFlatLargeAddField61(builder *flatbuffers.Builder, field61 uint32) {
	builder.PrependUint32Slot(60, field61, 0)
}
func MessageFlatLargeAddField62(builder *flatbuffers.Builder, field62 uint64) {
	builder.PrependUint64Slot(61, field62, 0)
}
func MessageFlatLargeAddField63(builder *flatbuffers.Builder, field63 int32) {
	builder.PrependInt32Slot(62, field63, 0)
}
func MessageFlatLargeAddField64(builder *flatbuffers.Builder, field64 int64) {
	builder.PrependInt64Slot(63, field64, 0)
}
func MessageFlatLargeAddField65(builder *flatbuffers.Builder, field65 float32) {
	builder.PrependFloat32Slot(64, field65, 0.0)
}
func MessageFlatLargeAddField66(builder *flatbuffers.Builder, field66 float64) {
	builder.PrependFloat64Slot(65, field66, 0.0)
}
func MessageFlatLargeAddField67(builder *flatbuffers.Builder, field67 bool) {
	builder.PrependBoolSlot(66, field67, false)
}
func MessageFlatLargeAddField68(builder *flatbuffers.Builder, field68 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(field68), 0)
}
func MessageFlatLargeAddField69(builder *flatbuffers.Builder, field69 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(field69), 0)
}
func MessageFlatLargeAddField70(builder *flatbuffers.Builder, field70 bool) {
	builder.PrependBoolSlot(69, field70, false)
}
func MessageFlatLargeAddField71(builder *flatbuffers.Builder, field71 uint32) {
	builder.PrependUint32Slot(70, field71, 0)
}
func MessageFlatLargeAddField72(builder *flatbuffers.Builder, field72 uint64) {
	builder.PrependUint64Slot(71, field72, 0)
}
func MessageFlatLargeAddField73(builder *flatbuffers.Builder, field73 int32) {
	builder.PrependInt32Slot(72, field73, 0)
}
func MessageFlatLargeAddField74(builder *flatbuffers.Builder, field74 int64) {
	builder.PrependInt64Slot(73, field74, 0)
}
func MessageFlatLargeAddField75(builder *flatbuffers.Builder, field75 float32) {
	builder.PrependFloat32Slot(74, field75, 0.0)
}
func MessageFlatLargeAddField76(builder *flatbuffers.Builder, field76 float64) {
	builder.PrependFloat64Slot(75, field76, 0.0)
}
func MessageFlatLargeAddField77(builder *flatbuffers.Builder, field77 bool) {
	builder.PrependBoolSlot(76, field77, false)
}
func MessageFlatLargeAddField78(builder *flatbuffers.Builder, field78 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(77, flatbuffers.UOffsetT(field78), 0)
}
func MessageFlatLargeAddField79(builder *flatbuffers.Builder, field79 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(78, flatbuffers.UOffsetT(field79), 0)
}
func MessageFlatLargeAddField80(builder *flatbuffers.Builder, field80 bool) {
	builder.PrependBoolSlot(79, field80, false)
}
func MessageFlatLargeAddField81(builder *flatbuffers.Builder, field81 uint32) {
	builder.PrependUint32Slot(80, field81, 0)
}
func MessageFlatLargeAddField82(builder *flatbuffers.Builder, field82 uint64) {
	builder.PrependUint64Slot(81, field82, 0)
}
func MessageFlatLargeAddField83(builder *flatbuffers.Builder, field83 int32) {
	builder.PrependInt32Slot(82, field83, 0)
}
func MessageFlatLargeAddField84(builder *flatbuffers.Builder, field84 int64) {
	builder.PrependInt64Slot(83, field84, 0)
}
func MessageFlatLargeAddField85(builder *flatbuffers.Builder, field85 float32) {
	builder.PrependFloat32Slot(84, field85, 0.0)
}
func MessageFlatLargeAddField86(builder *flatbuffers.Builder, field86 float64) {
	builder.PrependFloat64Slot(85, field86, 0.0)
}
func MessageFlatLargeAddField87(builder *flatbuffers.Builder, field87 bool) {
	builder.PrependBoolSlot(86, field87, false)
}
func MessageFlatLargeAddField88(builder *flatbuffers.Builder, field88 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(87, flatbuffers.UOffsetT(field88), 0)
}
func MessageFlatLargeAddField89(builder *flatbuffers.Builder, field89 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(field89), 0)
}
func MessageFlatLargeAddField90(builder *flatbuffers.Builder, field90 bool) {
	builder.PrependBoolSlot(89, field90, false)
}
func MessageFlatLargeAddField91(builder *flatbuffers.Builder, field91 uint32) {
	builder.PrependUint32Slot(90, field91, 0)
}
func MessageFlatLargeAddField92(builder *flatbuffers.Builder, field92 uint64) {
	builder.PrependUint64Slot(91, field92, 0)
}
func MessageFlatLargeAddField93(builder *flatbuffers.Builder, field93 int32) {
	builder.PrependInt32Slot(92, field93, 0)
}
func MessageFlatLargeAddField94(builder *flatbuffers.Builder, field94 int64) {
	builder.PrependInt64Slot(93, field94, 0)
}
func MessageFlatLargeAddField95(builder *flatbuffers.Builder, field95 float32) {
	builder.PrependFloat32Slot(94, field95, 0.0)
}
func MessageFlatLargeAddField96(builder *flatbuffers.Builder, field96 float64) {
	builder.PrependFloat64Slot(95, field96, 0.0)
}
func MessageFlatLargeAddField97(builder *flatbuffers.Builder, field97 bool) {
	builder.PrependBoolSlot(96, field97, false)
}
func MessageFlatLargeAddField98(builder *flatbuffers.Builder, field98 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(field98), 0)
}
func MessageFlatLargeAddField99(builder *flatbuffers.Builder, field99 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(98, flatbuffers.UOffsetT(field99), 0)
}
func MessageFlatLargeAddField100(builder *flatbuffers.Builder, field100 bool) {
	builder.PrependBoolSlot(99, field100, false)
}
func MessageFlatLargeAddField101(builder *flatbuffers.Builder, field101 uint32) {
	builder.PrependUint32Slot(100, field101, 0)
}
func MessageFlatLargeAddField102(builder *flatbuffers.Builder, field102 uint64) {
	builder.PrependUint64Slot(101, field102, 0)
}
func MessageFlatLargeAddField103(builder *flatbuffers.Builder, field103 int32) {
	builder.PrependInt32Slot(102, field103, 0)
}
func MessageFlatLargeAddField104(builder *flatbuffers.Builder, field104 int64) {
	builder.PrependInt64Slot(103, field104, 0)
}
func MessageFlatLargeAddField105(builder *flatbuffers.Builder, field105 float32) {
	builder.PrependFloat32Slot(104, field105, 0.0)
}
func MessageFlatLargeAddField106(builder *flatbuffers.Builder, field106 float64) {
	builder.PrependFloat64Slot(105, field106, 0.0)
}
func MessageFlatLargeAddField107(builder *flatbuffers.Builder, field107 bool) {
	builder.PrependBoolSlot(106, field107, false)
}
func MessageFlatLargeAddField108(builder *flatbuffers.Builder, field108 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(107, flatbuffers.UOffsetT(field108), 0)
}
func MessageFlatLargeAddField109(builder *flatbuffers.Builder, field109 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(108, flatbuffers.UOffsetT(field109), 0)
}
func MessageFlatLargeAddField110(builder *flatbuffers.Builder, field110 bool) {
	builder.PrependBoolSlot(109, field110, false)
}
func MessageFlatLargeAddField111(builder *flatbuffers.Builder, field111 uint32) {
	builder.PrependUint32Slot(110, field111, 0)
}
func MessageFlatLargeAddField112(builder *flatbuffers.Builder, field112 uint64) {
	builder.PrependUint64Slot(111, field112, 0)
}
func MessageFlatLargeAddField113(builder *flatbuffers.Builder, field113 int32) {
	builder.PrependInt32Slot(112, field113, 0)
}
func MessageFlatLargeAddField114(builder *flatbuffers.Builder, field114 int64) {
	builder.PrependInt64Slot(113, field114, 0)
}
func MessageFlatLargeAddField115(builder *flatbuffers.Builder, field115 float32) {
	builder.PrependFloat32Slot(114, field115, 0.0)
}
func MessageFlatLargeAddField116(builder *flatbuffers.Builder, field116 float64) {
	builder.PrependFloat64Slot(115, field116, 0.0)
}
func MessageFlatLargeAddField117(builder *flatbuffers.Builder, field117 bool) {
	builder.PrependBoolSlot(116, field117, false)
}
func MessageFlatLargeAddField118(builder *flatbuffers.Builder, field118 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(117, flatbuffers.UOffsetT(field118), 0)
}
func MessageFlatLargeAddField119(builder *flatbuffers.Builder, field119 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(118, flatbuffers.UOffsetT(field119), 0)
}
func MessageFlatLargeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
