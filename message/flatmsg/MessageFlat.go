// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatmsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageFlat struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageFlat(buf []byte, offset flatbuffers.UOffsetT) *MessageFlat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageFlat{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageFlat(buf []byte, offset flatbuffers.UOffsetT) *MessageFlat {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageFlat{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageFlat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageFlat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageFlat) Field1() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlat) MutateField1(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MessageFlat) Field2() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageFlat) MutateField2(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *MessageFlat) Field3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageFlat) Field4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MessageFlatStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MessageFlatAddField1(builder *flatbuffers.Builder, field1 uint64) {
	builder.PrependUint64Slot(0, field1, 0)
}
func MessageFlatAddField2(builder *flatbuffers.Builder, field2 uint32) {
	builder.PrependUint32Slot(1, field2, 0)
}
func MessageFlatAddField3(builder *flatbuffers.Builder, field3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(field3), 0)
}
func MessageFlatAddField4(builder *flatbuffers.Builder, field4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(field4), 0)
}
func MessageFlatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
